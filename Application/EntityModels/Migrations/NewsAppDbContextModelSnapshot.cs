// <auto-generated />
using System;
using EntityModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EntityModels.Migrations
{
    [DbContext(typeof(NewsAppDbContext))]
    partial class NewsAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntityModels.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("article_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("image");

                    b.Property<DateTime>("PublishTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("publish_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subtitle");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("views_count");

                    b.HasKey("ArticleId")
                        .HasName("article_pkey");

                    b.HasIndex("PublisherId");

                    b.HasIndex("SectionId");

                    b.ToTable("article", (string)null);
                });

            modelBuilder.Entity("EntityModels.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Обычный читатель с базовыми правами доступа",
                            Name = "Читатель"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Редактор с правами публикации статей",
                            Name = "Редактор"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Полный доступ ко всем возможностям и статистике приложения",
                            Name = "Администратор"
                        });
                });

            modelBuilder.Entity("EntityModels.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("section_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SectionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("MaterialIcon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("material_icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("SectionId")
                        .HasName("section_pkey");

                    b.ToTable("section", (string)null);

                    b.HasData(
                        new
                        {
                            SectionId = 1,
                            Description = "Новости о политике",
                            MaterialIcon = "",
                            Name = "Политика"
                        },
                        new
                        {
                            SectionId = 2,
                            Description = "Сводки о прошлом, настоящем и будущем",
                            MaterialIcon = "",
                            Name = "История"
                        },
                        new
                        {
                            SectionId = 3,
                            Description = "Новости о нововведениях в системе образования",
                            MaterialIcon = "",
                            Name = "Образование"
                        },
                        new
                        {
                            SectionId = 4,
                            Description = "Новости о предпринимательстве",
                            MaterialIcon = "",
                            Name = "Бизнес"
                        },
                        new
                        {
                            SectionId = 5,
                            Description = "Новости об управлении",
                            MaterialIcon = "",
                            Name = "Маркетинг"
                        },
                        new
                        {
                            SectionId = 6,
                            Description = "Новости о природе",
                            MaterialIcon = "",
                            Name = "Природа"
                        },
                        new
                        {
                            SectionId = 7,
                            Description = "Нововведения в медицине",
                            MaterialIcon = "",
                            Name = "Здоровье"
                        },
                        new
                        {
                            SectionId = 8,
                            Description = "Новости о соревнованиях",
                            MaterialIcon = "",
                            Name = "Спорт"
                        },
                        new
                        {
                            SectionId = 9,
                            Description = "Новые премьеры",
                            MaterialIcon = "",
                            Name = "Кино"
                        },
                        new
                        {
                            SectionId = 10,
                            Description = "Новые прорыва",
                            MaterialIcon = "",
                            Name = "Наука"
                        });
                });

            modelBuilder.Entity("EntityModels.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("email_address");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_salt");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("Registered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registered")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("user_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("EntityModels.Article", b =>
                {
                    b.HasOne("EntityModels.User", "Publisher")
                        .WithMany("Articles")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EntityModels.Section", "Section")
                        .WithMany("Articles")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("EntityModels.User", b =>
                {
                    b.HasOne("EntityModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EntityModels.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EntityModels.Section", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("EntityModels.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
